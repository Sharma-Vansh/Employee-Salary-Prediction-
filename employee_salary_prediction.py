# -*- coding: utf-8 -*-
"""Employee-Salary-Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KFD4gfcGxg_wbmOFmOY_ifeZotggOoBq
"""

# Employe Slary Predection

import pandas as pd

data = pd.read_csv("/content/dataset.csv")

data.head ()

data.tail(7)

data.info()

zeros_cnt = (data['Experience_Years'] == 0).sum()
print(f"Number of zeros in 'Certifications' column: {zeros_cnt}")



# Fill missing values with 0
data['Certifications'] = data['Certifications'].fillna(0)

# Optional: round and convert to integer
data['Certifications'] = data['Certifications'].round(0).astype(int)

print(data['Certifications'].head(41))

data['Experience_Years'] = pd.to_numeric(data['Experience_Years'], errors='coerce')
data['Experience_Years'] = data['Experience_Years'].fillna(0)
data['Experience_Years'] = data['Experience_Years'].round(0).astype(int)
data['Salary'] = pd.to_numeric(data['Salary'],errors='coerce')
data['Salary'] = data['Salary'].fillna(0)
data['Salary'] = data['Salary'].round(0).astype(int)

# Convert to numeric
data['Experience_Years'] = pd.to_numeric(data['Experience_Years'], errors='coerce')
data['Salary'] = pd.to_numeric(data['Salary'], errors='coerce')

# Fill NaNs with 0 temporarily and convert to int
data['Experience_Years'] = data['Experience_Years'].fillna(0).round(0).astype(int)
data['Salary'] = data['Salary'].fillna(0).round(0).astype(int)

# Replace 0 with column mean (calculated excluding 0s)
exp_mean = data.loc[data['Experience_Years'] != 0, 'Experience_Years'].mean()
sal_mean = data.loc[data['Salary'] != 0, 'Salary'].mean()

# Fill 0s with the calculated means
data['Experience_Years'] = data['Experience_Years'].replace(0, round(exp_mean))
data['Salary'] = data['Salary'].replace(0, round(sal_mean))



data.head()

null_values = data.isnull().sum()
print(null_values)

data.info()

data = data.dropna(subset=['Salary'])

data = data[(data != 0).all(axis=1)]

import numpy as np
import matplotlib as plt
import seaborn as sns

sns.lineplot(x='Experience_Years',y='Salary',data=data)

from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import pandas as pd

# Step 1: Prepare your data (assuming 'Salary' is the target)
X = data.drop(['Salary','Employee_ID'], axis=1)    # Features
y = data['Salary']                 # Target

# Step 2: Convert categorical columns to numbers (label encoding)
for col in X.columns:
    if X[col].dtype == 'object':
        le = LabelEncoder()
        X[col] = le.fit_transform(X[col].astype(str))

# Step 3: Train/test split (optional but good practice)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train a model
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Step 5: Get feature importances
importances = model.feature_importances_
feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Importance': importances
}).sort_values(by='Importance', ascending=False)

# Step 6: Display
print(feature_importance)

sns.lineplot(x='Certifications',y='Salary',data=data)

sns.lineplot(x='Education',y='Salary',data=data)

sns.lineplot(x='Department',y='Salary',data=data)

sns.barplot(
    x="Importance",
    y="Feature",
    data=feature_importance,
    palette="viridis"
)